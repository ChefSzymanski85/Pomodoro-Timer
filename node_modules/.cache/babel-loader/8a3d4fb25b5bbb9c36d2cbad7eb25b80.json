{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rosej\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport Break from \"./components/Break\";\nimport Focus from \"./components/Focus\";\nimport Progress from \"./components/Progress\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\nimport StartStopButton from \"./components/StartStopButton\"; //test\n\nfunction Pomodoro() {\n  const [focusLength, setFocusLength] = useState(25);\n  const [breakLength, setBreakLength] = useState(5);\n  const [timeRemaining, setTimeRemaining] = useState(25 * 60); // Timer starts out paused\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // clicking changes timer between true and false\n\n  const [mode, setMode] = useState(\"focus\");\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    if (timeRemaining === 0) {\n      new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n      const timeLength = mode === \"focus\" ? breakLength : focusLength; // select the correct time length\n\n      setTimeRemaining(timeLength * 60); // set the time remaining to the new length\n\n      setMode(prevMode => prevMode === \"focus\" ? \"break\" : \"focus\");\n      return; // return will end the callback function and re-render the component\n    }\n\n    setTimeRemaining(currentTimeRemaining => currentTimeRemaining - 1);\n  }, isTimerRunning ? 1000 : null); // useInterval(callback, duration)\n\n  function playPause() {\n    // if the session is false, reset our timeRemaining to default\n    if (!isSessionActive) {\n      setIsSessionActive(true);\n      setTimeRemaining(focusLength * 60); // should be in seconds\n    }\n\n    setIsTimerRunning(prevState => !prevState);\n  } // reset everything\n\n\n  function stopTimer() {\n    setIsSessionActive(false);\n    setIsTimerRunning(false);\n    setMode(\"focus\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Focus, {\n    focusLength: focusLength,\n    setFocusLength: setFocusLength,\n    isTimerRunning: isTimerRunning,\n    isSessionActive: isSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Break, {\n    breakLength: breakLength,\n    setBreakLength: setBreakLength,\n    isTimerRunning: isTimerRunning,\n    isSessionActive: isSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(StartStopButton, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    stopTimer: stopTimer,\n    isSessionActive: isSessionActive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Progress, {\n    mode: mode,\n    timeRemaining: timeRemaining,\n    isSessionActive: isSessionActive,\n    isTimerRunning: isTimerRunning,\n    focusLength: focusLength,\n    breakLength: breakLength,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/rosej/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","Break","Focus","Progress","classNames","useInterval","secondsToDuration","minutesToDuration","StartStopButton","Pomodoro","focusLength","setFocusLength","breakLength","setBreakLength","timeRemaining","setTimeRemaining","isTimerRunning","setIsTimerRunning","mode","setMode","isSessionActive","setIsSessionActive","Audio","play","timeLength","prevMode","currentTimeRemaining","playPause","prevState","stopTimer"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Break from \"./components/Break\";\nimport Focus from \"./components/Focus\";\nimport Progress from \"./components/Progress\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\nimport StartStopButton from \"./components/StartStopButton\";\n//test\n\nfunction Pomodoro() {\n  const [focusLength, setFocusLength] = useState(25);\n  const [breakLength, setBreakLength] = useState(5);\n  const [timeRemaining, setTimeRemaining] = useState(25 * 60);\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // clicking changes timer between true and false\n\n  const [mode, setMode] = useState(\"focus\");\n  const [isSessionActive, setIsSessionActive] = useState(false);\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      if (timeRemaining === 0) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        const timeLength = mode === \"focus\" ? breakLength : focusLength; // select the correct time length\n        setTimeRemaining(timeLength * 60); // set the time remaining to the new length\n        setMode((prevMode) => (prevMode === \"focus\" ? \"break\" : \"focus\"));\n        return; // return will end the callback function and re-render the component\n      }\n      setTimeRemaining((currentTimeRemaining) => currentTimeRemaining - 1);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  // useInterval(callback, duration)\n\n  function playPause() {\n    // if the session is false, reset our timeRemaining to default\n    if (!isSessionActive) {\n      setIsSessionActive(true);\n      setTimeRemaining(focusLength * 60); // should be in seconds\n    }\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  // reset everything\n  function stopTimer() {\n    setIsSessionActive(false);\n    setIsTimerRunning(false);\n    setMode(\"focus\");\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <Focus\n          focusLength={focusLength}\n          setFocusLength={setFocusLength}\n          isTimerRunning={isTimerRunning}\n          isSessionActive={isSessionActive}\n        />\n        <Break\n          breakLength={breakLength}\n          setBreakLength={setBreakLength}\n          isTimerRunning={isTimerRunning}\n          isSessionActive={isSessionActive}\n        />\n      </div>\n      <StartStopButton\n        playPause={playPause}\n        isTimerRunning={isTimerRunning}\n        stopTimer={stopTimer}\n        isSessionActive={isSessionActive}\n      />\n      <Progress\n        mode={mode}\n        timeRemaining={timeRemaining}\n        isSessionActive={isSessionActive}\n        isTimerRunning={isTimerRunning}\n        focusLength={focusLength}\n        breakLength={breakLength}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}