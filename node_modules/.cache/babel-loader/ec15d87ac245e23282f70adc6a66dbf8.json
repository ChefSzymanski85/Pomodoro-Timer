{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rosej\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\components\\\\Focus.js\";\nimport React, { useState } from \"react\";\nimport { secondsToDuration, minutesToDuration } from \"../../utils/duration\"; //import isTimerRunning from \"../Pomodoro\";\n\nconst Focus = ({\n  focusLength,\n  setFocusLength,\n  isTimerRunning,\n  isSessionActive\n}) => {\n  const decrementFocusLengthByOneMinute = () => {\n    setFocusLength(lastFocus => Math.max(5, lastFocus - 5)); // take the previous focus duration and subtract\n  };\n\n  const incrementFocusLengthByOneMinute = () => {\n    setFocusLength(lastFocus => Math.min(60, lastFocus + 5));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": \"duration-focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    id: \"break-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }, \"Focus Duration: \", minutesToDuration(focusLength))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group-append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"decrease-focus\",\n    onClick: decrementFocusLengthByOneMinute,\n    disabled: isSessionActive || isTimerRunning ? true : false // disabling button if session is active OR timer is running\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-minus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"increase-focus\",\n    onClick: incrementFocusLengthByOneMinute,\n    disabled: isSessionActive || isTimerRunning ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-plus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Focus;\n/*\r\n  const decrementFocusLengthByOneMinute = () => {\r\n    setFocusLength((lastFocus) => lastFocus - 1); // take the previous focus duration and subtract\r\n  };\r\n\r\n  const incrementFocusLengthByOneMinute = () => {\r\n    setFocusLength((lastFocus) => lastFocus + 1);\r\n  };\r\n\r\ndisabled={focusLength >= 60 || isTimerRunning ? true : false}\r\ndisabled={focusLength <= 5 || isTimerRunning ? true : false}\r\n*/","map":{"version":3,"sources":["C:/Users/rosej/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/components/Focus.js"],"names":["React","useState","secondsToDuration","minutesToDuration","Focus","focusLength","setFocusLength","isTimerRunning","isSessionActive","decrementFocusLengthByOneMinute","lastFocus","Math","max","incrementFocusLengthByOneMinute","min"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,sBAArD,C,CACA;;AAEA,MAAMC,KAAK,GAAG,CAAC;AACbC,EAAAA,WADa;AAEbC,EAAAA,cAFa;AAGbC,EAAAA,cAHa;AAIbC,EAAAA;AAJa,CAAD,KAKR;AACJ,QAAMC,+BAA+B,GAAG,MAAM;AAC5CH,IAAAA,cAAc,CAAEI,SAAD,IAAeC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYF,SAAS,GAAG,CAAxB,CAAhB,CAAd,CAD4C,CACe;AAC5D,GAFD;;AAIA,QAAMG,+BAA+B,GAAG,MAAM;AAC5CP,IAAAA,cAAc,CAAEI,SAAD,IAAeC,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaJ,SAAS,GAAG,CAAzB,CAAhB,CAAd;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAmC,mBAAY,gBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,EAAE,EAAC,aAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACmBP,iBAAiB,CAACE,WAAD,CADpC,CADF,CADF,eAOE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAGE,mBAAY,gBAHd;AAIE,IAAA,OAAO,EAAEI,+BAJX;AAKE,IAAA,QAAQ,EAAED,eAAe,IAAID,cAAnB,GAAoC,IAApC,GAA2C,KALvD,CAK8D;AAL9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,eAUE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAGE,mBAAY,gBAHd;AAIE,IAAA,OAAO,EAAEM,+BAJX;AAKE,IAAA,QAAQ,EAAEL,eAAe,IAAID,cAAnB,GAAoC,IAApC,GAA2C,KALvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CAVF,CAPF,CADF,CADF;AAgCD,CA9CD;;AAgDA,eAAeH,KAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\r\nimport { secondsToDuration, minutesToDuration } from \"../../utils/duration\";\r\n//import isTimerRunning from \"../Pomodoro\";\r\n\r\nconst Focus = ({\r\n  focusLength,\r\n  setFocusLength,\r\n  isTimerRunning,\r\n  isSessionActive,\r\n}) => {\r\n  const decrementFocusLengthByOneMinute = () => {\r\n    setFocusLength((lastFocus) => Math.max(5, lastFocus - 5)); // take the previous focus duration and subtract\r\n  };\r\n\r\n  const incrementFocusLengthByOneMinute = () => {\r\n    setFocusLength((lastFocus) => Math.min(60, lastFocus + 5));\r\n  };\r\n\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"input-group input-group-lg mb-2\">\r\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n          <p id=\"break-label\">\r\n            Focus Duration: {minutesToDuration(focusLength)}\r\n            {/* use preloaded function to display focus length in minutes*/}\r\n          </p>\r\n        </span>\r\n        <div className=\"input-group-append\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"decrease-focus\"\r\n            onClick={decrementFocusLengthByOneMinute}\r\n            disabled={isSessionActive || isTimerRunning ? true : false} // disabling button if session is active OR timer is running\r\n          >\r\n            <span className=\"oi oi-minus\" />\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"increase-focus\"\r\n            onClick={incrementFocusLengthByOneMinute}\r\n            disabled={isSessionActive || isTimerRunning ? true : false}\r\n          >\r\n            <span className=\"oi oi-plus\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Focus;\r\n\r\n/*\r\n  const decrementFocusLengthByOneMinute = () => {\r\n    setFocusLength((lastFocus) => lastFocus - 1); // take the previous focus duration and subtract\r\n  };\r\n\r\n  const incrementFocusLengthByOneMinute = () => {\r\n    setFocusLength((lastFocus) => lastFocus + 1);\r\n  };\r\n\r\ndisabled={focusLength >= 60 || isTimerRunning ? true : false}\r\ndisabled={focusLength <= 5 || isTimerRunning ? true : false}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}